{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\ALSAKB\\\\Videos\\\\GabiSchool\\\\Sprint-Project-Redux-Countries\\\\countries\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\n\n/*\r\n  Be sure to import in all of the action types from `../actions`\r\n*/\nimport * as all from \"../actions/index\";\n/*\r\n Your initial/default state for this project could *Although does not have to* look a lot like this\r\n {\r\n   countries: [],\r\n   fetchingCountries: false\r\n   addingCountry: false\r\n   updatingCountry: false\r\n   deletingCountry: false\r\n   error: null\r\n }\r\n*/\n\n/*\r\n  You'll only need one country reducer for this project.\r\n  Feel free to export it as a default and import as rootReducer. \r\n  This will guard your namespacing issues.\r\n  There is no need for 'combineReducers' in this project.\r\n  Components can then read your store as, `state` and not `state.fooReducer`.\r\n*/\n\nconst init = {\n  countries: [],\n  fetchingCountries: false,\n  addingCountry: false,\n  updatingCountry: false,\n  deletingCountry: false,\n  error: null\n};\nconsole.log(all);\nexport const countriesReducer = (state = init, action) => {\n  switch (action.type) {\n    case all.START:\n      return _objectSpread({}, state, {\n        fetchingCountries: false,\n        addingCountry: false,\n        updatingCountry: false,\n        deletingCountry: false,\n        error: null\n      });\n      break;\n\n    case all.SUCCESS:\n      return _objectSpread({}, state, {\n        fetchingCountries: false,\n        addingCountry: false,\n        updatingCountry: false,\n        deletingCountry: false,\n        error: null\n      });\n      break;\n\n    default:\n      return state;\n      break;\n  }\n};","map":{"version":3,"sources":["C:\\Users\\ALSAKB\\Videos\\GabiSchool\\Sprint-Project-Redux-Countries\\countries\\src\\reducers\\index.js"],"names":["all","init","countries","fetchingCountries","addingCountry","updatingCountry","deletingCountry","error","console","log","countriesReducer","state","action","type","START","SUCCESS"],"mappings":";;AAAA;;;AAGA,OAAO,KAAKA,GAAZ,MAAqB,kBAArB;AACA;;;;;;;;;;;;AAYA;;;;;;;;AAQA,MAAMC,IAAI,GAAG;AACVC,EAAAA,SAAS,EAAE,EADD;AAEVC,EAAAA,iBAAiB,EAAE,KAFT;AAGVC,EAAAA,aAAa,EAAE,KAHL;AAIVC,EAAAA,eAAe,EAAE,KAJP;AAKVC,EAAAA,eAAe,EAAE,KALP;AAMVC,EAAAA,KAAK,EAAE;AANG,CAAb;AASAC,OAAO,CAACC,GAAR,CAAYT,GAAZ;AAEA,OAAO,MAAMU,gBAAgB,GAAG,CAACC,KAAK,GAAGV,IAAT,EAAgBW,MAAhB,KAA2B;AACzD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKb,GAAG,CAACc,KAAT;AACE,+BACKH,KADL;AAEER,QAAAA,iBAAiB,EAAE,KAFrB;AAGEC,QAAAA,aAAa,EAAE,KAHjB;AAIEC,QAAAA,eAAe,EAAE,KAJnB;AAKEC,QAAAA,eAAe,EAAE,KALnB;AAMEC,QAAAA,KAAK,EAAE;AANT;AAQA;;AACF,SAAKP,GAAG,CAACe,OAAT;AACE,+BACKJ,KADL;AAEER,QAAAA,iBAAiB,EAAE,KAFrB;AAGEC,QAAAA,aAAa,EAAE,KAHjB;AAIEC,QAAAA,eAAe,EAAE,KAJnB;AAKEC,QAAAA,eAAe,EAAE,KALnB;AAMEC,QAAAA,KAAK,EAAE;AANT;AAQA;;AAEF;AACE,aAAOI,KAAP;AACA;AAxBJ;AA0BD,CA3BM","sourcesContent":["/*\r\n  Be sure to import in all of the action types from `../actions`\r\n*/\r\nimport * as all from \"../actions/index\"\r\n/*\r\n Your initial/default state for this project could *Although does not have to* look a lot like this\r\n {\r\n   countries: [],\r\n   fetchingCountries: false\r\n   addingCountry: false\r\n   updatingCountry: false\r\n   deletingCountry: false\r\n   error: null\r\n }\r\n*/\r\n\r\n/*\r\n  You'll only need one country reducer for this project.\r\n  Feel free to export it as a default and import as rootReducer. \r\n  This will guard your namespacing issues.\r\n  There is no need for 'combineReducers' in this project.\r\n  Components can then read your store as, `state` and not `state.fooReducer`.\r\n*/\r\n\r\nconst init = {\r\n   countries: [],\r\n   fetchingCountries: false,\r\n   addingCountry: false,\r\n   updatingCountry: false,\r\n   deletingCountry: false,\r\n   error: null\r\n }\r\n \r\nconsole.log(all);\r\n\r\nexport const countriesReducer = (state = init , action) => {\r\n  switch (action.type) {\r\n    case all.START:\r\n      return {\r\n        ...state,\r\n        fetchingCountries: false,\r\n        addingCountry: false,\r\n        updatingCountry: false,\r\n        deletingCountry: false,\r\n        error: null,\r\n      };\r\n      break;\r\n    case all.SUCCESS:\r\n      return {\r\n        ...state,\r\n        fetchingCountries: false,\r\n        addingCountry: false,\r\n        updatingCountry: false,\r\n        deletingCountry: false,\r\n        error: null,\r\n      };\r\n      break;\r\n  \r\n    default:\r\n      return state;\r\n      break;\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}